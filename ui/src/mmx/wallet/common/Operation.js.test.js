import { assert, describe, expect, it } from "vitest";
import { Operation } from "./Operation";

import "../utils/Uint8ArrayUtils";

describe("mmx.operation.Deposit", () => {
    const json =
        '{"__type": "mmx.operation.Deposit", "version": 0, "address": "mmx1zmkneqqv28gyt8k8m3a09f2v2h3s0n44gly60hn5tq2d892re2asyh6g5x", "solution": 65535, "method": "trade", "args": ["mmx16aq5vpcmxcrh9xck0z06eqnmr87w5r2j062snjj6g7cvj0thry7q0mp3w6", "0x4189374bc6a7f0"], "user": null, "currency": "mmx1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqdgytev", "amount": "1000001"}';

    const hex =


    it("hash_serialize", () => {
        const obj = JSON.parse(json);
        const op = new Operation(obj);
        const hash_serialize = op.hash_serialize(true);
        assert.equal(hash_serialize.toHex(), hex);
    });
});

describe("mmx.operation.Execute", () => {
    const json =
        '{"__type": "mmx.operation.Execute", "version": 0, "address": "mmx1zmkneqqv28gyt8k8m3a09f2v2h3s0n44gly60hn5tq2d892re2asyh6g5x", "solution": 0, "method": "withdraw", "args": [], "user": "mmx16aq5vpcmxcrh9xck0z06eqnmr87w5r2j062snjj6g7cvj0thry7q0mp3w6"}';

    const hex =


    it("hash_serialize", () => {
        const obj = JSON.parse(json);
        const op = new Operation(obj);
        const hash_serialize = op.hash_serialize(true);
        assert.equal(hash_serialize.toHex(), hex);
    });
});

describe("mmx.operation.Operation", () => {
    it("invalid type", () => {
        expect(() => new Operation(Symbol("invalid type"))).toThrowError();
    });
});
