import { describe, it, assert } from "vitest";

import { ECDSA_Wallet } from "./ECDSA_Wallet";
import { Transaction } from "./Transaction";
import "./Transaction.ext";

import { JSONbigNative } from "./utils/JSONbigNative";
import "./utils/Uint8ArrayUtils";

const mnemonic = import.meta.env.VITE_TEST_MNEMONIC;

const ecdsaWallet = new ECDSA_Wallet(mnemonic, "");

const txs = new Map();

txs.set("TRANSFER", {
    json: '{"__type": "mmx.Transaction", "id": "BE81B668509D9611DBBEBAC9B21CC44250DC97278720FABFA18AEAB7F4A78A10", "version": 0, "expires": 20958, "fee_ratio": 1024, "static_cost": 50000, "max_fee_amount": 5040000, "note": "TRANSFER", "nonce": 16274384975138489954, "network": "mainnet", "sender": "mmx16aq5vpcmxcrh9xck0z06eqnmr87w5r2j062snjj6g7cvj0thry7q0mp3w6", "inputs": [{"address": "mmx16aq5vpcmxcrh9xck0z06eqnmr87w5r2j062snjj6g7cvj0thry7q0mp3w6", "contract": "mmx1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqdgytev", "amount": "100000", "memo": null, "solution": 0, "flags": 0}], "outputs": [{"address": "mmx16aq5vpcmxcrh9xck0z06eqnmr87w5r2j062snjj6g7cvj0thry7q0mp3w6", "contract": "mmx1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqdgytev", "amount": "100000", "memo": null}], "execute": [], "solutions": [{"__type": "mmx.solution.PubKey", "version": 0, "pubkey": "0344EE96D1B85CAC0F99B7CFA44F39EFFC590BDF51D45099D1F24AA09E5F9AD6E0", "signature": "9834FF50F306E1E911B93594F1347EEF3280EABF95E22C34F89DF679D8C21BC263DF9D84861C305C267300D749003808CE64E13BF1BFF932D0A2248C22CEE4F5"}], "deploy": null, "exec_result": null, "content_hash": "C7B2ED1BDEBC15075DC972BFE1339802625935393792C55357C3E015415CA5B4"}',
    hex
});

txs.forEach((item, key) => {
    describe(`Transaction #${key}`, () => {
        const json = item.json;
        const hex = item.hex;
        const deposit = item.deposit;

        const _tx = Transaction.parse(json);
        const id = _tx.id;
        const content_hash = _tx.content_hash;

        it("parse", () => {
            const tx = Transaction.parse(json);
            assert.equal(tx.toString(), JSONbigNative.stringify(JSONbigNative.parse(json)));
        });

        it("calc_hash full", () => {
            const tx = Transaction.parse(json);

            const hash_serialize = tx.hash_serialize(true);
            const hash = tx.calc_hash(true);

            assert.equal(hash_serialize.toHex(), hex);
            assert.equal(hash.toHex(), content_hash);
        });

        it("calc_hash short", () => {
            const tx = Transaction.parse(json);
            const hash = tx.calc_hash(false);
            assert.equal(hash.toHex(), id);
        });

        it("finalize", () => {
            const tx = Transaction.parse(json);
            tx.id = null;
            tx.finalize();
            assert.equal(tx.id, id);
        });

        it("sign", async () => {
            const tx = Transaction.parse(json);
            tx.id = null;
            tx.inputs = [];
            tx.solutions = [];

            await ecdsaWallet.completeAsync(tx, { expire_at: tx.expires, network: "mainnet" }, deposit);
            assert.equal(tx.toString(), JSONbigNative.stringify(JSONbigNative.parse(json)));
        });
    });
});
