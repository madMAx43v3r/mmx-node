
// AUTO GENERATED by vnxcppcodegen

#include <mmx/package.hxx>
#include <mmx/ChainParams.hxx>
#include <mmx/addr_t.hpp>
#include <mmx/uint_fraction_t.hxx>
#include <vnx/Value.h>

#include <vnx/vnx.h>


namespace mmx {


const vnx::Hash64 ChainParams::VNX_TYPE_HASH(0x51bba8d28881e8e7ull);
const vnx::Hash64 ChainParams::VNX_CODE_HASH(0x5bbd642fe8410bbbull);

vnx::Hash64 ChainParams::get_type_hash() const {
	return VNX_TYPE_HASH;
}

std::string ChainParams::get_type_name() const {
	return "mmx.ChainParams";
}

const vnx::TypeCode* ChainParams::get_type_code() const {
	return mmx::vnx_native_type_code_ChainParams;
}

std::shared_ptr<ChainParams> ChainParams::create() {
	return std::make_shared<ChainParams>();
}

std::shared_ptr<vnx::Value> ChainParams::clone() const {
	return std::make_shared<ChainParams>(*this);
}

void ChainParams::read(vnx::TypeInput& _in, const vnx::TypeCode* _type_code, const uint16_t* _code) {
	vnx::read(_in, *this, _type_code, _code);
}

void ChainParams::write(vnx::TypeOutput& _out, const vnx::TypeCode* _type_code, const uint16_t* _code) const {
	vnx::write(_out, *this, _type_code, _code);
}

void ChainParams::accept(vnx::Visitor& _visitor) const {
	const vnx::TypeCode* _type_code = mmx::vnx_native_type_code_ChainParams;
	_visitor.type_begin(*_type_code);
	_visitor.type_field(_type_code->fields[0], 0); vnx::accept(_visitor, port);
	_visitor.type_field(_type_code->fields[1], 1); vnx::accept(_visitor, decimals);
	_visitor.type_field(_type_code->fields[2], 2); vnx::accept(_visitor, min_ksize);
	_visitor.type_field(_type_code->fields[3], 3); vnx::accept(_visitor, max_ksize);
	_visitor.type_field(_type_code->fields[4], 4); vnx::accept(_visitor, plot_filter);
	_visitor.type_field(_type_code->fields[5], 5); vnx::accept(_visitor, post_filter);
	_visitor.type_field(_type_code->fields[6], 6); vnx::accept(_visitor, commit_delay);
	_visitor.type_field(_type_code->fields[7], 7); vnx::accept(_visitor, infuse_delay);
	_visitor.type_field(_type_code->fields[8], 8); vnx::accept(_visitor, challenge_delay);
	_visitor.type_field(_type_code->fields[9], 9); vnx::accept(_visitor, challenge_interval);
	_visitor.type_field(_type_code->fields[10], 10); vnx::accept(_visitor, max_diff_adjust);
	_visitor.type_field(_type_code->fields[11], 11); vnx::accept(_visitor, max_vdf_count);
	_visitor.type_field(_type_code->fields[12], 12); vnx::accept(_visitor, max_space_fork_len);
	_visitor.type_field(_type_code->fields[13], 13); vnx::accept(_visitor, avg_proof_count);
	_visitor.type_field(_type_code->fields[14], 14); vnx::accept(_visitor, max_proof_count);
	_visitor.type_field(_type_code->fields[15], 15); vnx::accept(_visitor, max_validators);
	_visitor.type_field(_type_code->fields[16], 16); vnx::accept(_visitor, min_reward);
	_visitor.type_field(_type_code->fields[17], 17); vnx::accept(_visitor, vdf_reward);
	_visitor.type_field(_type_code->fields[18], 18); vnx::accept(_visitor, vdf_reward_interval);
	_visitor.type_field(_type_code->fields[19], 19); vnx::accept(_visitor, vdf_segment_size);
	_visitor.type_field(_type_code->fields[20], 20); vnx::accept(_visitor, reward_adjust_div);
	_visitor.type_field(_type_code->fields[21], 21); vnx::accept(_visitor, reward_adjust_tick);
	_visitor.type_field(_type_code->fields[22], 22); vnx::accept(_visitor, reward_adjust_interval);
	_visitor.type_field(_type_code->fields[23], 23); vnx::accept(_visitor, target_mmx_gold_price);
	_visitor.type_field(_type_code->fields[24], 24); vnx::accept(_visitor, time_diff_divider);
	_visitor.type_field(_type_code->fields[25], 25); vnx::accept(_visitor, time_diff_constant);
	_visitor.type_field(_type_code->fields[26], 26); vnx::accept(_visitor, space_diff_constant);
	_visitor.type_field(_type_code->fields[27], 27); vnx::accept(_visitor, initial_time_diff);
	_visitor.type_field(_type_code->fields[28], 28); vnx::accept(_visitor, initial_space_diff);
	_visitor.type_field(_type_code->fields[29], 29); vnx::accept(_visitor, initial_time_stamp);
	_visitor.type_field(_type_code->fields[30], 30); vnx::accept(_visitor, min_txfee);
	_visitor.type_field(_type_code->fields[31], 31); vnx::accept(_visitor, min_txfee_io);
	_visitor.type_field(_type_code->fields[32], 32); vnx::accept(_visitor, min_txfee_sign);
	_visitor.type_field(_type_code->fields[33], 33); vnx::accept(_visitor, min_txfee_memo);
	_visitor.type_field(_type_code->fields[34], 34); vnx::accept(_visitor, min_txfee_exec);
	_visitor.type_field(_type_code->fields[35], 35); vnx::accept(_visitor, min_txfee_deploy);
	_visitor.type_field(_type_code->fields[36], 36); vnx::accept(_visitor, min_txfee_depend);
	_visitor.type_field(_type_code->fields[37], 37); vnx::accept(_visitor, min_txfee_byte);
	_visitor.type_field(_type_code->fields[38], 38); vnx::accept(_visitor, min_txfee_read);
	_visitor.type_field(_type_code->fields[39], 39); vnx::accept(_visitor, min_txfee_read_kbyte);
	_visitor.type_field(_type_code->fields[40], 40); vnx::accept(_visitor, max_block_size);
	_visitor.type_field(_type_code->fields[41], 41); vnx::accept(_visitor, max_block_cost);
	_visitor.type_field(_type_code->fields[42], 42); vnx::accept(_visitor, max_tx_cost);
	_visitor.type_field(_type_code->fields[43], 43); vnx::accept(_visitor, max_rcall_depth);
	_visitor.type_field(_type_code->fields[44], 44); vnx::accept(_visitor, max_rcall_width);
	_visitor.type_field(_type_code->fields[45], 45); vnx::accept(_visitor, min_fee_ratio);
	_visitor.type_field(_type_code->fields[46], 46); vnx::accept(_visitor, block_interval_ms);
	_visitor.type_field(_type_code->fields[47], 47); vnx::accept(_visitor, network);
	_visitor.type_field(_type_code->fields[48], 48); vnx::accept(_visitor, nft_binary);
	_visitor.type_field(_type_code->fields[49], 49); vnx::accept(_visitor, swap_binary);
	_visitor.type_field(_type_code->fields[50], 50); vnx::accept(_visitor, offer_binary);
	_visitor.type_field(_type_code->fields[51], 51); vnx::accept(_visitor, token_binary);
	_visitor.type_field(_type_code->fields[52], 52); vnx::accept(_visitor, plot_nft_binary);
	_visitor.type_field(_type_code->fields[53], 53); vnx::accept(_visitor, escrow_binary);
	_visitor.type_field(_type_code->fields[54], 54); vnx::accept(_visitor, time_lock_binary);
	_visitor.type_field(_type_code->fields[55], 55); vnx::accept(_visitor, relay_binary);
	_visitor.type_field(_type_code->fields[56], 56); vnx::accept(_visitor, fixed_project_reward);
	_visitor.type_field(_type_code->fields[57], 57); vnx::accept(_visitor, project_ratio);
	_visitor.type_field(_type_code->fields[58], 58); vnx::accept(_visitor, reward_activation);
	_visitor.type_field(_type_code->fields[59], 59); vnx::accept(_visitor, transaction_activation);
	_visitor.type_field(_type_code->fields[60], 60); vnx::accept(_visitor, hardfork1_height);
	_visitor.type_field(_type_code->fields[61], 61); vnx::accept(_visitor, hardfork2_height);
	_visitor.type_end(*_type_code);
}

void ChainParams::write(std::ostream& _out) const {
	_out << "{\"__type\": \"mmx.ChainParams\"";
	_out << ", \"port\": "; vnx::write(_out, port);
	_out << ", \"decimals\": "; vnx::write(_out, decimals);
	_out << ", \"min_ksize\": "; vnx::write(_out, min_ksize);
	_out << ", \"max_ksize\": "; vnx::write(_out, max_ksize);
	_out << ", \"plot_filter\": "; vnx::write(_out, plot_filter);
	_out << ", \"post_filter\": "; vnx::write(_out, post_filter);
	_out << ", \"commit_delay\": "; vnx::write(_out, commit_delay);
	_out << ", \"infuse_delay\": "; vnx::write(_out, infuse_delay);
	_out << ", \"challenge_delay\": "; vnx::write(_out, challenge_delay);
	_out << ", \"challenge_interval\": "; vnx::write(_out, challenge_interval);
	_out << ", \"max_diff_adjust\": "; vnx::write(_out, max_diff_adjust);
	_out << ", \"max_vdf_count\": "; vnx::write(_out, max_vdf_count);
	_out << ", \"max_space_fork_len\": "; vnx::write(_out, max_space_fork_len);
	_out << ", \"avg_proof_count\": "; vnx::write(_out, avg_proof_count);
	_out << ", \"max_proof_count\": "; vnx::write(_out, max_proof_count);
	_out << ", \"max_validators\": "; vnx::write(_out, max_validators);
	_out << ", \"min_reward\": "; vnx::write(_out, min_reward);
	_out << ", \"vdf_reward\": "; vnx::write(_out, vdf_reward);
	_out << ", \"vdf_reward_interval\": "; vnx::write(_out, vdf_reward_interval);
	_out << ", \"vdf_segment_size\": "; vnx::write(_out, vdf_segment_size);
	_out << ", \"reward_adjust_div\": "; vnx::write(_out, reward_adjust_div);
	_out << ", \"reward_adjust_tick\": "; vnx::write(_out, reward_adjust_tick);
	_out << ", \"reward_adjust_interval\": "; vnx::write(_out, reward_adjust_interval);
	_out << ", \"target_mmx_gold_price\": "; vnx::write(_out, target_mmx_gold_price);
	_out << ", \"time_diff_divider\": "; vnx::write(_out, time_diff_divider);
	_out << ", \"time_diff_constant\": "; vnx::write(_out, time_diff_constant);
	_out << ", \"space_diff_constant\": "; vnx::write(_out, space_diff_constant);
	_out << ", \"initial_time_diff\": "; vnx::write(_out, initial_time_diff);
	_out << ", \"initial_space_diff\": "; vnx::write(_out, initial_space_diff);
	_out << ", \"initial_time_stamp\": "; vnx::write(_out, initial_time_stamp);
	_out << ", \"min_txfee\": "; vnx::write(_out, min_txfee);
	_out << ", \"min_txfee_io\": "; vnx::write(_out, min_txfee_io);
	_out << ", \"min_txfee_sign\": "; vnx::write(_out, min_txfee_sign);
	_out << ", \"min_txfee_memo\": "; vnx::write(_out, min_txfee_memo);
	_out << ", \"min_txfee_exec\": "; vnx::write(_out, min_txfee_exec);
	_out << ", \"min_txfee_deploy\": "; vnx::write(_out, min_txfee_deploy);
	_out << ", \"min_txfee_depend\": "; vnx::write(_out, min_txfee_depend);
	_out << ", \"min_txfee_byte\": "; vnx::write(_out, min_txfee_byte);
	_out << ", \"min_txfee_read\": "; vnx::write(_out, min_txfee_read);
	_out << ", \"min_txfee_read_kbyte\": "; vnx::write(_out, min_txfee_read_kbyte);
	_out << ", \"max_block_size\": "; vnx::write(_out, max_block_size);
	_out << ", \"max_block_cost\": "; vnx::write(_out, max_block_cost);
	_out << ", \"max_tx_cost\": "; vnx::write(_out, max_tx_cost);
	_out << ", \"max_rcall_depth\": "; vnx::write(_out, max_rcall_depth);
	_out << ", \"max_rcall_width\": "; vnx::write(_out, max_rcall_width);
	_out << ", \"min_fee_ratio\": "; vnx::write(_out, min_fee_ratio);
	_out << ", \"block_interval_ms\": "; vnx::write(_out, block_interval_ms);
	_out << ", \"network\": "; vnx::write(_out, network);
	_out << ", \"nft_binary\": "; vnx::write(_out, nft_binary);
	_out << ", \"swap_binary\": "; vnx::write(_out, swap_binary);
	_out << ", \"offer_binary\": "; vnx::write(_out, offer_binary);
	_out << ", \"token_binary\": "; vnx::write(_out, token_binary);
	_out << ", \"plot_nft_binary\": "; vnx::write(_out, plot_nft_binary);
	_out << ", \"escrow_binary\": "; vnx::write(_out, escrow_binary);
	_out << ", \"time_lock_binary\": "; vnx::write(_out, time_lock_binary);
	_out << ", \"relay_binary\": "; vnx::write(_out, relay_binary);
	_out << ", \"fixed_project_reward\": "; vnx::write(_out, fixed_project_reward);
	_out << ", \"project_ratio\": "; vnx::write(_out, project_ratio);
	_out << ", \"reward_activation\": "; vnx::write(_out, reward_activation);
	_out << ", \"transaction_activation\": "; vnx::write(_out, transaction_activation);
	_out << ", \"hardfork1_height\": "; vnx::write(_out, hardfork1_height);
	_out << ", \"hardfork2_height\": "; vnx::write(_out, hardfork2_height);
	_out << "}";
}

void ChainParams::read(std::istream& _in) {
	if(auto _json = vnx::read_json(_in)) {
		from_object(_json->to_object());
	}
}

vnx::Object ChainParams::to_object() const {
	vnx::Object _object;
	_object["__type"] = "mmx.ChainParams";
	_object["port"] = port;
	_object["decimals"] = decimals;
	_object["min_ksize"] = min_ksize;
	_object["max_ksize"] = max_ksize;
	_object["plot_filter"] = plot_filter;
	_object["post_filter"] = post_filter;
	_object["commit_delay"] = commit_delay;
	_object["infuse_delay"] = infuse_delay;
	_object["challenge_delay"] = challenge_delay;
	_object["challenge_interval"] = challenge_interval;
	_object["max_diff_adjust"] = max_diff_adjust;
	_object["max_vdf_count"] = max_vdf_count;
	_object["max_space_fork_len"] = max_space_fork_len;
	_object["avg_proof_count"] = avg_proof_count;
	_object["max_proof_count"] = max_proof_count;
	_object["max_validators"] = max_validators;
	_object["min_reward"] = min_reward;
	_object["vdf_reward"] = vdf_reward;
	_object["vdf_reward_interval"] = vdf_reward_interval;
	_object["vdf_segment_size"] = vdf_segment_size;
	_object["reward_adjust_div"] = reward_adjust_div;
	_object["reward_adjust_tick"] = reward_adjust_tick;
	_object["reward_adjust_interval"] = reward_adjust_interval;
	_object["target_mmx_gold_price"] = target_mmx_gold_price;
	_object["time_diff_divider"] = time_diff_divider;
	_object["time_diff_constant"] = time_diff_constant;
	_object["space_diff_constant"] = space_diff_constant;
	_object["initial_time_diff"] = initial_time_diff;
	_object["initial_space_diff"] = initial_space_diff;
	_object["initial_time_stamp"] = initial_time_stamp;
	_object["min_txfee"] = min_txfee;
	_object["min_txfee_io"] = min_txfee_io;
	_object["min_txfee_sign"] = min_txfee_sign;
	_object["min_txfee_memo"] = min_txfee_memo;
	_object["min_txfee_exec"] = min_txfee_exec;
	_object["min_txfee_deploy"] = min_txfee_deploy;
	_object["min_txfee_depend"] = min_txfee_depend;
	_object["min_txfee_byte"] = min_txfee_byte;
	_object["min_txfee_read"] = min_txfee_read;
	_object["min_txfee_read_kbyte"] = min_txfee_read_kbyte;
	_object["max_block_size"] = max_block_size;
	_object["max_block_cost"] = max_block_cost;
	_object["max_tx_cost"] = max_tx_cost;
	_object["max_rcall_depth"] = max_rcall_depth;
	_object["max_rcall_width"] = max_rcall_width;
	_object["min_fee_ratio"] = min_fee_ratio;
	_object["block_interval_ms"] = block_interval_ms;
	_object["network"] = network;
	_object["nft_binary"] = nft_binary;
	_object["swap_binary"] = swap_binary;
	_object["offer_binary"] = offer_binary;
	_object["token_binary"] = token_binary;
	_object["plot_nft_binary"] = plot_nft_binary;
	_object["escrow_binary"] = escrow_binary;
	_object["time_lock_binary"] = time_lock_binary;
	_object["relay_binary"] = relay_binary;
	_object["fixed_project_reward"] = fixed_project_reward;
	_object["project_ratio"] = project_ratio;
	_object["reward_activation"] = reward_activation;
	_object["transaction_activation"] = transaction_activation;
	_object["hardfork1_height"] = hardfork1_height;
	_object["hardfork2_height"] = hardfork2_height;
	return _object;
}

void ChainParams::from_object(const vnx::Object& _object) {
	for(const auto& _entry : _object.field) {
		if(_entry.first == "avg_proof_count") {
			_entry.second.to(avg_proof_count);
		} else if(_entry.first == "block_interval_ms") {
			_entry.second.to(block_interval_ms);
		} else if(_entry.first == "challenge_delay") {
			_entry.second.to(challenge_delay);
		} else if(_entry.first == "challenge_interval") {
			_entry.second.to(challenge_interval);
		} else if(_entry.first == "commit_delay") {
			_entry.second.to(commit_delay);
		} else if(_entry.first == "decimals") {
			_entry.second.to(decimals);
		} else if(_entry.first == "escrow_binary") {
			_entry.second.to(escrow_binary);
		} else if(_entry.first == "fixed_project_reward") {
			_entry.second.to(fixed_project_reward);
		} else if(_entry.first == "hardfork1_height") {
			_entry.second.to(hardfork1_height);
		} else if(_entry.first == "hardfork2_height") {
			_entry.second.to(hardfork2_height);
		} else if(_entry.first == "infuse_delay") {
			_entry.second.to(infuse_delay);
		} else if(_entry.first == "initial_space_diff") {
			_entry.second.to(initial_space_diff);
		} else if(_entry.first == "initial_time_diff") {
			_entry.second.to(initial_time_diff);
		} else if(_entry.first == "initial_time_stamp") {
			_entry.second.to(initial_time_stamp);
		} else if(_entry.first == "max_block_cost") {
			_entry.second.to(max_block_cost);
		} else if(_entry.first == "max_block_size") {
			_entry.second.to(max_block_size);
		} else if(_entry.first == "max_diff_adjust") {
			_entry.second.to(max_diff_adjust);
		} else if(_entry.first == "max_ksize") {
			_entry.second.to(max_ksize);
		} else if(_entry.first == "max_proof_count") {
			_entry.second.to(max_proof_count);
		} else if(_entry.first == "max_rcall_depth") {
			_entry.second.to(max_rcall_depth);
		} else if(_entry.first == "max_rcall_width") {
			_entry.second.to(max_rcall_width);
		} else if(_entry.first == "max_space_fork_len") {
			_entry.second.to(max_space_fork_len);
		} else if(_entry.first == "max_tx_cost") {
			_entry.second.to(max_tx_cost);
		} else if(_entry.first == "max_validators") {
			_entry.second.to(max_validators);
		} else if(_entry.first == "max_vdf_count") {
			_entry.second.to(max_vdf_count);
		} else if(_entry.first == "min_fee_ratio") {
			_entry.second.to(min_fee_ratio);
		} else if(_entry.first == "min_ksize") {
			_entry.second.to(min_ksize);
		} else if(_entry.first == "min_reward") {
			_entry.second.to(min_reward);
		} else if(_entry.first == "min_txfee") {
			_entry.second.to(min_txfee);
		} else if(_entry.first == "min_txfee_byte") {
			_entry.second.to(min_txfee_byte);
		} else if(_entry.first == "min_txfee_depend") {
			_entry.second.to(min_txfee_depend);
		} else if(_entry.first == "min_txfee_deploy") {
			_entry.second.to(min_txfee_deploy);
		} else if(_entry.first == "min_txfee_exec") {
			_entry.second.to(min_txfee_exec);
		} else if(_entry.first == "min_txfee_io") {
			_entry.second.to(min_txfee_io);
		} else if(_entry.first == "min_txfee_memo") {
			_entry.second.to(min_txfee_memo);
		} else if(_entry.first == "min_txfee_read") {
			_entry.second.to(min_txfee_read);
		} else if(_entry.first == "min_txfee_read_kbyte") {
			_entry.second.to(min_txfee_read_kbyte);
		} else if(_entry.first == "min_txfee_sign") {
			_entry.second.to(min_txfee_sign);
		} else if(_entry.first == "network") {
			_entry.second.to(network);
		} else if(_entry.first == "nft_binary") {
			_entry.second.to(nft_binary);
		} else if(_entry.first == "offer_binary") {
			_entry.second.to(offer_binary);
		} else if(_entry.first == "plot_filter") {
			_entry.second.to(plot_filter);
		} else if(_entry.first == "plot_nft_binary") {
			_entry.second.to(plot_nft_binary);
		} else if(_entry.first == "port") {
			_entry.second.to(port);
		} else if(_entry.first == "post_filter") {
			_entry.second.to(post_filter);
		} else if(_entry.first == "project_ratio") {
			_entry.second.to(project_ratio);
		} else if(_entry.first == "relay_binary") {
			_entry.second.to(relay_binary);
		} else if(_entry.first == "reward_activation") {
			_entry.second.to(reward_activation);
		} else if(_entry.first == "reward_adjust_div") {
			_entry.second.to(reward_adjust_div);
		} else if(_entry.first == "reward_adjust_interval") {
			_entry.second.to(reward_adjust_interval);
		} else if(_entry.first == "reward_adjust_tick") {
			_entry.second.to(reward_adjust_tick);
		} else if(_entry.first == "space_diff_constant") {
			_entry.second.to(space_diff_constant);
		} else if(_entry.first == "swap_binary") {
			_entry.second.to(swap_binary);
		} else if(_entry.first == "target_mmx_gold_price") {
			_entry.second.to(target_mmx_gold_price);
		} else if(_entry.first == "time_diff_constant") {
			_entry.second.to(time_diff_constant);
		} else if(_entry.first == "time_diff_divider") {
			_entry.second.to(time_diff_divider);
		} else if(_entry.first == "time_lock_binary") {
			_entry.second.to(time_lock_binary);
		} else if(_entry.first == "token_binary") {
			_entry.second.to(token_binary);
		} else if(_entry.first == "transaction_activation") {
			_entry.second.to(transaction_activation);
		} else if(_entry.first == "vdf_reward") {
			_entry.second.to(vdf_reward);
		} else if(_entry.first == "vdf_reward_interval") {
			_entry.second.to(vdf_reward_interval);
		} else if(_entry.first == "vdf_segment_size") {
			_entry.second.to(vdf_segment_size);
		}
	}
}

vnx::Variant ChainParams::get_field(const std::string& _name) const {
	if(_name == "port") {
		return vnx::Variant(port);
	}
	if(_name == "decimals") {
		return vnx::Variant(decimals);
	}
	if(_name == "min_ksize") {
		return vnx::Variant(min_ksize);
	}
	if(_name == "max_ksize") {
		return vnx::Variant(max_ksize);
	}
	if(_name == "plot_filter") {
		return vnx::Variant(plot_filter);
	}
	if(_name == "post_filter") {
		return vnx::Variant(post_filter);
	}
	if(_name == "commit_delay") {
		return vnx::Variant(commit_delay);
	}
	if(_name == "infuse_delay") {
		return vnx::Variant(infuse_delay);
	}
	if(_name == "challenge_delay") {
		return vnx::Variant(challenge_delay);
	}
	if(_name == "challenge_interval") {
		return vnx::Variant(challenge_interval);
	}
	if(_name == "max_diff_adjust") {
		return vnx::Variant(max_diff_adjust);
	}
	if(_name == "max_vdf_count") {
		return vnx::Variant(max_vdf_count);
	}
	if(_name == "max_space_fork_len") {
		return vnx::Variant(max_space_fork_len);
	}
	if(_name == "avg_proof_count") {
		return vnx::Variant(avg_proof_count);
	}
	if(_name == "max_proof_count") {
		return vnx::Variant(max_proof_count);
	}
	if(_name == "max_validators") {
		return vnx::Variant(max_validators);
	}
	if(_name == "min_reward") {
		return vnx::Variant(min_reward);
	}
	if(_name == "vdf_reward") {
		return vnx::Variant(vdf_reward);
	}
	if(_name == "vdf_reward_interval") {
		return vnx::Variant(vdf_reward_interval);
	}
	if(_name == "vdf_segment_size") {
		return vnx::Variant(vdf_segment_size);
	}
	if(_name == "reward_adjust_div") {
		return vnx::Variant(reward_adjust_div);
	}
	if(_name == "reward_adjust_tick") {
		return vnx::Variant(reward_adjust_tick);
	}
	if(_name == "reward_adjust_interval") {
		return vnx::Variant(reward_adjust_interval);
	}
	if(_name == "target_mmx_gold_price") {
		return vnx::Variant(target_mmx_gold_price);
	}
	if(_name == "time_diff_divider") {
		return vnx::Variant(time_diff_divider);
	}
	if(_name == "time_diff_constant") {
		return vnx::Variant(time_diff_constant);
	}
	if(_name == "space_diff_constant") {
		return vnx::Variant(space_diff_constant);
	}
	if(_name == "initial_time_diff") {
		return vnx::Variant(initial_time_diff);
	}
	if(_name == "initial_space_diff") {
		return vnx::Variant(initial_space_diff);
	}
	if(_name == "initial_time_stamp") {
		return vnx::Variant(initial_time_stamp);
	}
	if(_name == "min_txfee") {
		return vnx::Variant(min_txfee);
	}
	if(_name == "min_txfee_io") {
		return vnx::Variant(min_txfee_io);
	}
	if(_name == "min_txfee_sign") {
		return vnx::Variant(min_txfee_sign);
	}
	if(_name == "min_txfee_memo") {
		return vnx::Variant(min_txfee_memo);
	}
	if(_name == "min_txfee_exec") {
		return vnx::Variant(min_txfee_exec);
	}
	if(_name == "min_txfee_deploy") {
		return vnx::Variant(min_txfee_deploy);
	}
	if(_name == "min_txfee_depend") {
		return vnx::Variant(min_txfee_depend);
	}
	if(_name == "min_txfee_byte") {
		return vnx::Variant(min_txfee_byte);
	}
	if(_name == "min_txfee_read") {
		return vnx::Variant(min_txfee_read);
	}
	if(_name == "min_txfee_read_kbyte") {
		return vnx::Variant(min_txfee_read_kbyte);
	}
	if(_name == "max_block_size") {
		return vnx::Variant(max_block_size);
	}
	if(_name == "max_block_cost") {
		return vnx::Variant(max_block_cost);
	}
	if(_name == "max_tx_cost") {
		return vnx::Variant(max_tx_cost);
	}
	if(_name == "max_rcall_depth") {
		return vnx::Variant(max_rcall_depth);
	}
	if(_name == "max_rcall_width") {
		return vnx::Variant(max_rcall_width);
	}
	if(_name == "min_fee_ratio") {
		return vnx::Variant(min_fee_ratio);
	}
	if(_name == "block_interval_ms") {
		return vnx::Variant(block_interval_ms);
	}
	if(_name == "network") {
		return vnx::Variant(network);
	}
	if(_name == "nft_binary") {
		return vnx::Variant(nft_binary);
	}
	if(_name == "swap_binary") {
		return vnx::Variant(swap_binary);
	}
	if(_name == "offer_binary") {
		return vnx::Variant(offer_binary);
	}
	if(_name == "token_binary") {
		return vnx::Variant(token_binary);
	}
	if(_name == "plot_nft_binary") {
		return vnx::Variant(plot_nft_binary);
	}
	if(_name == "escrow_binary") {
		return vnx::Variant(escrow_binary);
	}
	if(_name == "time_lock_binary") {
		return vnx::Variant(time_lock_binary);
	}
	if(_name == "relay_binary") {
		return vnx::Variant(relay_binary);
	}
	if(_name == "fixed_project_reward") {
		return vnx::Variant(fixed_project_reward);
	}
	if(_name == "project_ratio") {
		return vnx::Variant(project_ratio);
	}
	if(_name == "reward_activation") {
		return vnx::Variant(reward_activation);
	}
	if(_name == "transaction_activation") {
		return vnx::Variant(transaction_activation);
	}
	if(_name == "hardfork1_height") {
		return vnx::Variant(hardfork1_height);
	}
	if(_name == "hardfork2_height") {
		return vnx::Variant(hardfork2_height);
	}
	return vnx::Variant();
}

void ChainParams::set_field(const std::string& _name, const vnx::Variant& _value) {
	if(_name == "port") {
		_value.to(port);
	} else if(_name == "decimals") {
		_value.to(decimals);
	} else if(_name == "min_ksize") {
		_value.to(min_ksize);
	} else if(_name == "max_ksize") {
		_value.to(max_ksize);
	} else if(_name == "plot_filter") {
		_value.to(plot_filter);
	} else if(_name == "post_filter") {
		_value.to(post_filter);
	} else if(_name == "commit_delay") {
		_value.to(commit_delay);
	} else if(_name == "infuse_delay") {
		_value.to(infuse_delay);
	} else if(_name == "challenge_delay") {
		_value.to(challenge_delay);
	} else if(_name == "challenge_interval") {
		_value.to(challenge_interval);
	} else if(_name == "max_diff_adjust") {
		_value.to(max_diff_adjust);
	} else if(_name == "max_vdf_count") {
		_value.to(max_vdf_count);
	} else if(_name == "max_space_fork_len") {
		_value.to(max_space_fork_len);
	} else if(_name == "avg_proof_count") {
		_value.to(avg_proof_count);
	} else if(_name == "max_proof_count") {
		_value.to(max_proof_count);
	} else if(_name == "max_validators") {
		_value.to(max_validators);
	} else if(_name == "min_reward") {
		_value.to(min_reward);
	} else if(_name == "vdf_reward") {
		_value.to(vdf_reward);
	} else if(_name == "vdf_reward_interval") {
		_value.to(vdf_reward_interval);
	} else if(_name == "vdf_segment_size") {
		_value.to(vdf_segment_size);
	} else if(_name == "reward_adjust_div") {
		_value.to(reward_adjust_div);
	} else if(_name == "reward_adjust_tick") {
		_value.to(reward_adjust_tick);
	} else if(_name == "reward_adjust_interval") {
		_value.to(reward_adjust_interval);
	} else if(_name == "target_mmx_gold_price") {
		_value.to(target_mmx_gold_price);
	} else if(_name == "time_diff_divider") {
		_value.to(time_diff_divider);
	} else if(_name == "time_diff_constant") {
		_value.to(time_diff_constant);
	} else if(_name == "space_diff_constant") {
		_value.to(space_diff_constant);
	} else if(_name == "initial_time_diff") {
		_value.to(initial_time_diff);
	} else if(_name == "initial_space_diff") {
		_value.to(initial_space_diff);
	} else if(_name == "initial_time_stamp") {
		_value.to(initial_time_stamp);
	} else if(_name == "min_txfee") {
		_value.to(min_txfee);
	} else if(_name == "min_txfee_io") {
		_value.to(min_txfee_io);
	} else if(_name == "min_txfee_sign") {
		_value.to(min_txfee_sign);
	} else if(_name == "min_txfee_memo") {
		_value.to(min_txfee_memo);
	} else if(_name == "min_txfee_exec") {
		_value.to(min_txfee_exec);
	} else if(_name == "min_txfee_deploy") {
		_value.to(min_txfee_deploy);
	} else if(_name == "min_txfee_depend") {
		_value.to(min_txfee_depend);
	} else if(_name == "min_txfee_byte") {
		_value.to(min_txfee_byte);
	} else if(_name == "min_txfee_read") {
		_value.to(min_txfee_read);
	} else if(_name == "min_txfee_read_kbyte") {
		_value.to(min_txfee_read_kbyte);
	} else if(_name == "max_block_size") {
		_value.to(max_block_size);
	} else if(_name == "max_block_cost") {
		_value.to(max_block_cost);
	} else if(_name == "max_tx_cost") {
		_value.to(max_tx_cost);
	} else if(_name == "max_rcall_depth") {
		_value.to(max_rcall_depth);
	} else if(_name == "max_rcall_width") {
		_value.to(max_rcall_width);
	} else if(_name == "min_fee_ratio") {
		_value.to(min_fee_ratio);
	} else if(_name == "block_interval_ms") {
		_value.to(block_interval_ms);
	} else if(_name == "network") {
		_value.to(network);
	} else if(_name == "nft_binary") {
		_value.to(nft_binary);
	} else if(_name == "swap_binary") {
		_value.to(swap_binary);
	} else if(_name == "offer_binary") {
		_value.to(offer_binary);
	} else if(_name == "token_binary") {
		_value.to(token_binary);
	} else if(_name == "plot_nft_binary") {
		_value.to(plot_nft_binary);
	} else if(_name == "escrow_binary") {
		_value.to(escrow_binary);
	} else if(_name == "time_lock_binary") {
		_value.to(time_lock_binary);
	} else if(_name == "relay_binary") {
		_value.to(relay_binary);
	} else if(_name == "fixed_project_reward") {
		_value.to(fixed_project_reward);
	} else if(_name == "project_ratio") {
		_value.to(project_ratio);
	} else if(_name == "reward_activation") {
		_value.to(reward_activation);
	} else if(_name == "transaction_activation") {
		_value.to(transaction_activation);
	} else if(_name == "hardfork1_height") {
		_value.to(hardfork1_height);
	} else if(_name == "hardfork2_height") {
		_value.to(hardfork2_height);
	}
}

/// \private
std::ostream& operator<<(std::ostream& _out, const ChainParams& _value) {
	_value.write(_out);
	return _out;
}

/// \private
std::istream& operator>>(std::istream& _in, ChainParams& _value) {
	_value.read(_in);
	return _in;
}

const vnx::TypeCode* ChainParams::static_get_type_code() {
	const vnx::TypeCode* type_code = vnx::get_type_code(VNX_TYPE_HASH);
	if(!type_code) {
		type_code = vnx::register_type_code(static_create_type_code());
	}
	return type_code;
}

std::shared_ptr<vnx::TypeCode> ChainParams::static_create_type_code() {
	auto type_code = std::make_shared<vnx::TypeCode>();
	type_code->name = "mmx.ChainParams";
	type_code->type_hash = vnx::Hash64(0x51bba8d28881e8e7ull);
	type_code->code_hash = vnx::Hash64(0x5bbd642fe8410bbbull);
	type_code->is_native = true;
	type_code->is_class = true;
	type_code->native_size = sizeof(::mmx::ChainParams);
	type_code->create_value = []() -> std::shared_ptr<vnx::Value> { return std::make_shared<ChainParams>(); };
	type_code->depends.resize(1);
	type_code->depends[0] = ::mmx::uint_fraction_t::static_get_type_code();
	type_code->fields.resize(62);
	{
		auto& field = type_code->fields[0];
		field.data_size = 4;
		field.name = "port";
		field.code = {3};
	}
	{
		auto& field = type_code->fields[1];
		field.data_size = 4;
		field.name = "decimals";
		field.value = vnx::to_string(6);
		field.code = {7};
	}
	{
		auto& field = type_code->fields[2];
		field.data_size = 4;
		field.name = "min_ksize";
		field.value = vnx::to_string(29);
		field.code = {3};
	}
	{
		auto& field = type_code->fields[3];
		field.data_size = 4;
		field.name = "max_ksize";
		field.value = vnx::to_string(32);
		field.code = {3};
	}
	{
		auto& field = type_code->fields[4];
		field.data_size = 4;
		field.name = "plot_filter";
		field.value = vnx::to_string(4);
		field.code = {3};
	}
	{
		auto& field = type_code->fields[5];
		field.data_size = 4;
		field.name = "post_filter";
		field.value = vnx::to_string(10);
		field.code = {3};
	}
	{
		auto& field = type_code->fields[6];
		field.data_size = 4;
		field.name = "commit_delay";
		field.value = vnx::to_string(18);
		field.code = {3};
	}
	{
		auto& field = type_code->fields[7];
		field.data_size = 4;
		field.name = "infuse_delay";
		field.value = vnx::to_string(6);
		field.code = {3};
	}
	{
		auto& field = type_code->fields[8];
		field.data_size = 4;
		field.name = "challenge_delay";
		field.value = vnx::to_string(9);
		field.code = {3};
	}
	{
		auto& field = type_code->fields[9];
		field.data_size = 4;
		field.name = "challenge_interval";
		field.value = vnx::to_string(48);
		field.code = {3};
	}
	{
		auto& field = type_code->fields[10];
		field.data_size = 4;
		field.name = "max_diff_adjust";
		field.value = vnx::to_string(10);
		field.code = {3};
	}
	{
		auto& field = type_code->fields[11];
		field.data_size = 4;
		field.name = "max_vdf_count";
		field.value = vnx::to_string(100);
		field.code = {3};
	}
	{
		auto& field = type_code->fields[12];
		field.data_size = 4;
		field.name = "max_space_fork_len";
		field.value = vnx::to_string(8);
		field.code = {3};
	}
	{
		auto& field = type_code->fields[13];
		field.data_size = 4;
		field.name = "avg_proof_count";
		field.value = vnx::to_string(3);
		field.code = {3};
	}
	{
		auto& field = type_code->fields[14];
		field.data_size = 4;
		field.name = "max_proof_count";
		field.value = vnx::to_string(50);
		field.code = {3};
	}
	{
		auto& field = type_code->fields[15];
		field.data_size = 4;
		field.name = "max_validators";
		field.value = vnx::to_string(11);
		field.code = {3};
	}
	{
		auto& field = type_code->fields[16];
		field.data_size = 8;
		field.name = "min_reward";
		field.value = vnx::to_string(200000);
		field.code = {4};
	}
	{
		auto& field = type_code->fields[17];
		field.data_size = 8;
		field.name = "vdf_reward";
		field.value = vnx::to_string(500000);
		field.code = {4};
	}
	{
		auto& field = type_code->fields[18];
		field.data_size = 4;
		field.name = "vdf_reward_interval";
		field.value = vnx::to_string(50);
		field.code = {3};
	}
	{
		auto& field = type_code->fields[19];
		field.data_size = 4;
		field.name = "vdf_segment_size";
		field.value = vnx::to_string(50000);
		field.code = {3};
	}
	{
		auto& field = type_code->fields[20];
		field.data_size = 4;
		field.name = "reward_adjust_div";
		field.value = vnx::to_string(100);
		field.code = {3};
	}
	{
		auto& field = type_code->fields[21];
		field.data_size = 4;
		field.name = "reward_adjust_tick";
		field.value = vnx::to_string(10000);
		field.code = {3};
	}
	{
		auto& field = type_code->fields[22];
		field.data_size = 4;
		field.name = "reward_adjust_interval";
		field.value = vnx::to_string(8640);
		field.code = {3};
	}
	{
		auto& field = type_code->fields[23];
		field.data_size = 4;
		field.name = "target_mmx_gold_price";
		field.value = vnx::to_string(2000);
		field.code = {3};
	}
	{
		auto& field = type_code->fields[24];
		field.data_size = 8;
		field.name = "time_diff_divider";
		field.value = vnx::to_string(1000);
		field.code = {4};
	}
	{
		auto& field = type_code->fields[25];
		field.data_size = 8;
		field.name = "time_diff_constant";
		field.value = vnx::to_string(1000000);
		field.code = {4};
	}
	{
		auto& field = type_code->fields[26];
		field.data_size = 8;
		field.name = "space_diff_constant";
		field.value = vnx::to_string(100000000);
		field.code = {4};
	}
	{
		auto& field = type_code->fields[27];
		field.data_size = 8;
		field.name = "initial_time_diff";
		field.value = vnx::to_string(50);
		field.code = {4};
	}
	{
		auto& field = type_code->fields[28];
		field.data_size = 8;
		field.name = "initial_space_diff";
		field.value = vnx::to_string(10);
		field.code = {4};
	}
	{
		auto& field = type_code->fields[29];
		field.data_size = 8;
		field.name = "initial_time_stamp";
		field.value = vnx::to_string(0);
		field.code = {4};
	}
	{
		auto& field = type_code->fields[30];
		field.data_size = 8;
		field.name = "min_txfee";
		field.value = vnx::to_string(100);
		field.code = {4};
	}
	{
		auto& field = type_code->fields[31];
		field.data_size = 8;
		field.name = "min_txfee_io";
		field.value = vnx::to_string(100);
		field.code = {4};
	}
	{
		auto& field = type_code->fields[32];
		field.data_size = 8;
		field.name = "min_txfee_sign";
		field.value = vnx::to_string(1000);
		field.code = {4};
	}
	{
		auto& field = type_code->fields[33];
		field.data_size = 8;
		field.name = "min_txfee_memo";
		field.value = vnx::to_string(50);
		field.code = {4};
	}
	{
		auto& field = type_code->fields[34];
		field.data_size = 8;
		field.name = "min_txfee_exec";
		field.value = vnx::to_string(10000);
		field.code = {4};
	}
	{
		auto& field = type_code->fields[35];
		field.data_size = 8;
		field.name = "min_txfee_deploy";
		field.value = vnx::to_string(100000);
		field.code = {4};
	}
	{
		auto& field = type_code->fields[36];
		field.data_size = 8;
		field.name = "min_txfee_depend";
		field.value = vnx::to_string(50000);
		field.code = {4};
	}
	{
		auto& field = type_code->fields[37];
		field.data_size = 8;
		field.name = "min_txfee_byte";
		field.value = vnx::to_string(10);
		field.code = {4};
	}
	{
		auto& field = type_code->fields[38];
		field.data_size = 8;
		field.name = "min_txfee_read";
		field.value = vnx::to_string(1000);
		field.code = {4};
	}
	{
		auto& field = type_code->fields[39];
		field.data_size = 8;
		field.name = "min_txfee_read_kbyte";
		field.value = vnx::to_string(1000);
		field.code = {4};
	}
	{
		auto& field = type_code->fields[40];
		field.data_size = 8;
		field.name = "max_block_size";
		field.value = vnx::to_string(10000000);
		field.code = {4};
	}
	{
		auto& field = type_code->fields[41];
		field.data_size = 8;
		field.name = "max_block_cost";
		field.value = vnx::to_string(100000000);
		field.code = {4};
	}
	{
		auto& field = type_code->fields[42];
		field.data_size = 8;
		field.name = "max_tx_cost";
		field.value = vnx::to_string(1000000);
		field.code = {4};
	}
	{
		auto& field = type_code->fields[43];
		field.data_size = 4;
		field.name = "max_rcall_depth";
		field.value = vnx::to_string(3);
		field.code = {3};
	}
	{
		auto& field = type_code->fields[44];
		field.data_size = 4;
		field.name = "max_rcall_width";
		field.value = vnx::to_string(10);
		field.code = {3};
	}
	{
		auto& field = type_code->fields[45];
		field.is_extended = true;
		field.name = "min_fee_ratio";
		field.code = {12, 3};
	}
	{
		auto& field = type_code->fields[46];
		field.data_size = 8;
		field.name = "block_interval_ms";
		field.value = vnx::to_string(10000);
		field.code = {8};
	}
	{
		auto& field = type_code->fields[47];
		field.is_extended = true;
		field.name = "network";
		field.code = {32};
	}
	{
		auto& field = type_code->fields[48];
		field.is_extended = true;
		field.name = "nft_binary";
		field.code = {11, 32, 1};
	}
	{
		auto& field = type_code->fields[49];
		field.is_extended = true;
		field.name = "swap_binary";
		field.code = {11, 32, 1};
	}
	{
		auto& field = type_code->fields[50];
		field.is_extended = true;
		field.name = "offer_binary";
		field.code = {11, 32, 1};
	}
	{
		auto& field = type_code->fields[51];
		field.is_extended = true;
		field.name = "token_binary";
		field.code = {11, 32, 1};
	}
	{
		auto& field = type_code->fields[52];
		field.is_extended = true;
		field.name = "plot_nft_binary";
		field.code = {11, 32, 1};
	}
	{
		auto& field = type_code->fields[53];
		field.is_extended = true;
		field.name = "escrow_binary";
		field.code = {11, 32, 1};
	}
	{
		auto& field = type_code->fields[54];
		field.is_extended = true;
		field.name = "time_lock_binary";
		field.code = {11, 32, 1};
	}
	{
		auto& field = type_code->fields[55];
		field.is_extended = true;
		field.name = "relay_binary";
		field.code = {11, 32, 1};
	}
	{
		auto& field = type_code->fields[56];
		field.data_size = 8;
		field.name = "fixed_project_reward";
		field.value = vnx::to_string(50000);
		field.code = {4};
	}
	{
		auto& field = type_code->fields[57];
		field.is_extended = true;
		field.name = "project_ratio";
		field.code = {19, 0};
	}
	{
		auto& field = type_code->fields[58];
		field.data_size = 4;
		field.name = "reward_activation";
		field.value = vnx::to_string(50000);
		field.code = {3};
	}
	{
		auto& field = type_code->fields[59];
		field.data_size = 4;
		field.name = "transaction_activation";
		field.value = vnx::to_string(100000);
		field.code = {3};
	}
	{
		auto& field = type_code->fields[60];
		field.data_size = 4;
		field.name = "hardfork1_height";
		field.value = vnx::to_string(1000000);
		field.code = {3};
	}
	{
		auto& field = type_code->fields[61];
		field.data_size = 4;
		field.name = "hardfork2_height";
		field.value = vnx::to_string(2000000);
		field.code = {3};
	}
	type_code->build();
	return type_code;
}

std::shared_ptr<vnx::Value> ChainParams::vnx_call_switch(std::shared_ptr<const vnx::Value> _method) {
	switch(_method->get_type_hash()) {
	}
	return nullptr;
}


} // namespace mmx


namespace vnx {

void read(TypeInput& in, ::mmx::ChainParams& value, const TypeCode* type_code, const uint16_t* code) {
	TypeInput::recursion_t tag(in);
	if(code) {
		switch(code[0]) {
			case CODE_OBJECT:
			case CODE_ALT_OBJECT: {
				Object tmp;
				vnx::read(in, tmp, type_code, code);
				value.from_object(tmp);
				return;
			}
			case CODE_DYNAMIC:
			case CODE_ALT_DYNAMIC:
				vnx::read_dynamic(in, value);
				return;
		}
	}
	if(!type_code) {
		vnx::skip(in, type_code, code);
		return;
	}
	if(code) {
		switch(code[0]) {
			case CODE_STRUCT: type_code = type_code->depends[code[1]]; break;
			case CODE_ALT_STRUCT: type_code = type_code->depends[vnx::flip_bytes(code[1])]; break;
			default: {
				vnx::skip(in, type_code, code);
				return;
			}
		}
	}
	const auto* const _buf = in.read(type_code->total_field_size);
	if(type_code->is_matched) {
		if(const auto* const _field = type_code->field_map[0]) {
			vnx::read_value(_buf + _field->offset, value.port, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[1]) {
			vnx::read_value(_buf + _field->offset, value.decimals, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[2]) {
			vnx::read_value(_buf + _field->offset, value.min_ksize, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[3]) {
			vnx::read_value(_buf + _field->offset, value.max_ksize, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[4]) {
			vnx::read_value(_buf + _field->offset, value.plot_filter, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[5]) {
			vnx::read_value(_buf + _field->offset, value.post_filter, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[6]) {
			vnx::read_value(_buf + _field->offset, value.commit_delay, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[7]) {
			vnx::read_value(_buf + _field->offset, value.infuse_delay, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[8]) {
			vnx::read_value(_buf + _field->offset, value.challenge_delay, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[9]) {
			vnx::read_value(_buf + _field->offset, value.challenge_interval, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[10]) {
			vnx::read_value(_buf + _field->offset, value.max_diff_adjust, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[11]) {
			vnx::read_value(_buf + _field->offset, value.max_vdf_count, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[12]) {
			vnx::read_value(_buf + _field->offset, value.max_space_fork_len, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[13]) {
			vnx::read_value(_buf + _field->offset, value.avg_proof_count, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[14]) {
			vnx::read_value(_buf + _field->offset, value.max_proof_count, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[15]) {
			vnx::read_value(_buf + _field->offset, value.max_validators, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[16]) {
			vnx::read_value(_buf + _field->offset, value.min_reward, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[17]) {
			vnx::read_value(_buf + _field->offset, value.vdf_reward, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[18]) {
			vnx::read_value(_buf + _field->offset, value.vdf_reward_interval, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[19]) {
			vnx::read_value(_buf + _field->offset, value.vdf_segment_size, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[20]) {
			vnx::read_value(_buf + _field->offset, value.reward_adjust_div, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[21]) {
			vnx::read_value(_buf + _field->offset, value.reward_adjust_tick, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[22]) {
			vnx::read_value(_buf + _field->offset, value.reward_adjust_interval, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[23]) {
			vnx::read_value(_buf + _field->offset, value.target_mmx_gold_price, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[24]) {
			vnx::read_value(_buf + _field->offset, value.time_diff_divider, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[25]) {
			vnx::read_value(_buf + _field->offset, value.time_diff_constant, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[26]) {
			vnx::read_value(_buf + _field->offset, value.space_diff_constant, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[27]) {
			vnx::read_value(_buf + _field->offset, value.initial_time_diff, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[28]) {
			vnx::read_value(_buf + _field->offset, value.initial_space_diff, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[29]) {
			vnx::read_value(_buf + _field->offset, value.initial_time_stamp, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[30]) {
			vnx::read_value(_buf + _field->offset, value.min_txfee, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[31]) {
			vnx::read_value(_buf + _field->offset, value.min_txfee_io, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[32]) {
			vnx::read_value(_buf + _field->offset, value.min_txfee_sign, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[33]) {
			vnx::read_value(_buf + _field->offset, value.min_txfee_memo, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[34]) {
			vnx::read_value(_buf + _field->offset, value.min_txfee_exec, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[35]) {
			vnx::read_value(_buf + _field->offset, value.min_txfee_deploy, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[36]) {
			vnx::read_value(_buf + _field->offset, value.min_txfee_depend, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[37]) {
			vnx::read_value(_buf + _field->offset, value.min_txfee_byte, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[38]) {
			vnx::read_value(_buf + _field->offset, value.min_txfee_read, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[39]) {
			vnx::read_value(_buf + _field->offset, value.min_txfee_read_kbyte, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[40]) {
			vnx::read_value(_buf + _field->offset, value.max_block_size, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[41]) {
			vnx::read_value(_buf + _field->offset, value.max_block_cost, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[42]) {
			vnx::read_value(_buf + _field->offset, value.max_tx_cost, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[43]) {
			vnx::read_value(_buf + _field->offset, value.max_rcall_depth, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[44]) {
			vnx::read_value(_buf + _field->offset, value.max_rcall_width, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[46]) {
			vnx::read_value(_buf + _field->offset, value.block_interval_ms, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[56]) {
			vnx::read_value(_buf + _field->offset, value.fixed_project_reward, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[58]) {
			vnx::read_value(_buf + _field->offset, value.reward_activation, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[59]) {
			vnx::read_value(_buf + _field->offset, value.transaction_activation, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[60]) {
			vnx::read_value(_buf + _field->offset, value.hardfork1_height, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[61]) {
			vnx::read_value(_buf + _field->offset, value.hardfork2_height, _field->code.data());
		}
	}
	for(const auto* _field : type_code->ext_fields) {
		switch(_field->native_index) {
			case 45: vnx::read(in, value.min_fee_ratio, type_code, _field->code.data()); break;
			case 47: vnx::read(in, value.network, type_code, _field->code.data()); break;
			case 48: vnx::read(in, value.nft_binary, type_code, _field->code.data()); break;
			case 49: vnx::read(in, value.swap_binary, type_code, _field->code.data()); break;
			case 50: vnx::read(in, value.offer_binary, type_code, _field->code.data()); break;
			case 51: vnx::read(in, value.token_binary, type_code, _field->code.data()); break;
			case 52: vnx::read(in, value.plot_nft_binary, type_code, _field->code.data()); break;
			case 53: vnx::read(in, value.escrow_binary, type_code, _field->code.data()); break;
			case 54: vnx::read(in, value.time_lock_binary, type_code, _field->code.data()); break;
			case 55: vnx::read(in, value.relay_binary, type_code, _field->code.data()); break;
			case 57: vnx::read(in, value.project_ratio, type_code, _field->code.data()); break;
			default: vnx::skip(in, type_code, _field->code.data());
		}
	}
}

void write(TypeOutput& out, const ::mmx::ChainParams& value, const TypeCode* type_code, const uint16_t* code) {
	if(code && code[0] == CODE_OBJECT) {
		vnx::write(out, value.to_object(), nullptr, code);
		return;
	}
	if(!type_code || (code && code[0] == CODE_ANY)) {
		type_code = mmx::vnx_native_type_code_ChainParams;
		out.write_type_code(type_code);
		vnx::write_class_header<::mmx::ChainParams>(out);
	}
	else if(code && code[0] == CODE_STRUCT) {
		type_code = type_code->depends[code[1]];
	}
	auto* const _buf = out.write(296);
	vnx::write_value(_buf + 0, value.port);
	vnx::write_value(_buf + 4, value.decimals);
	vnx::write_value(_buf + 8, value.min_ksize);
	vnx::write_value(_buf + 12, value.max_ksize);
	vnx::write_value(_buf + 16, value.plot_filter);
	vnx::write_value(_buf + 20, value.post_filter);
	vnx::write_value(_buf + 24, value.commit_delay);
	vnx::write_value(_buf + 28, value.infuse_delay);
	vnx::write_value(_buf + 32, value.challenge_delay);
	vnx::write_value(_buf + 36, value.challenge_interval);
	vnx::write_value(_buf + 40, value.max_diff_adjust);
	vnx::write_value(_buf + 44, value.max_vdf_count);
	vnx::write_value(_buf + 48, value.max_space_fork_len);
	vnx::write_value(_buf + 52, value.avg_proof_count);
	vnx::write_value(_buf + 56, value.max_proof_count);
	vnx::write_value(_buf + 60, value.max_validators);
	vnx::write_value(_buf + 64, value.min_reward);
	vnx::write_value(_buf + 72, value.vdf_reward);
	vnx::write_value(_buf + 80, value.vdf_reward_interval);
	vnx::write_value(_buf + 84, value.vdf_segment_size);
	vnx::write_value(_buf + 88, value.reward_adjust_div);
	vnx::write_value(_buf + 92, value.reward_adjust_tick);
	vnx::write_value(_buf + 96, value.reward_adjust_interval);
	vnx::write_value(_buf + 100, value.target_mmx_gold_price);
	vnx::write_value(_buf + 104, value.time_diff_divider);
	vnx::write_value(_buf + 112, value.time_diff_constant);
	vnx::write_value(_buf + 120, value.space_diff_constant);
	vnx::write_value(_buf + 128, value.initial_time_diff);
	vnx::write_value(_buf + 136, value.initial_space_diff);
	vnx::write_value(_buf + 144, value.initial_time_stamp);
	vnx::write_value(_buf + 152, value.min_txfee);
	vnx::write_value(_buf + 160, value.min_txfee_io);
	vnx::write_value(_buf + 168, value.min_txfee_sign);
	vnx::write_value(_buf + 176, value.min_txfee_memo);
	vnx::write_value(_buf + 184, value.min_txfee_exec);
	vnx::write_value(_buf + 192, value.min_txfee_deploy);
	vnx::write_value(_buf + 200, value.min_txfee_depend);
	vnx::write_value(_buf + 208, value.min_txfee_byte);
	vnx::write_value(_buf + 216, value.min_txfee_read);
	vnx::write_value(_buf + 224, value.min_txfee_read_kbyte);
	vnx::write_value(_buf + 232, value.max_block_size);
	vnx::write_value(_buf + 240, value.max_block_cost);
	vnx::write_value(_buf + 248, value.max_tx_cost);
	vnx::write_value(_buf + 256, value.max_rcall_depth);
	vnx::write_value(_buf + 260, value.max_rcall_width);
	vnx::write_value(_buf + 264, value.block_interval_ms);
	vnx::write_value(_buf + 272, value.fixed_project_reward);
	vnx::write_value(_buf + 280, value.reward_activation);
	vnx::write_value(_buf + 284, value.transaction_activation);
	vnx::write_value(_buf + 288, value.hardfork1_height);
	vnx::write_value(_buf + 292, value.hardfork2_height);
	vnx::write(out, value.min_fee_ratio, type_code, type_code->fields[45].code.data());
	vnx::write(out, value.network, type_code, type_code->fields[47].code.data());
	vnx::write(out, value.nft_binary, type_code, type_code->fields[48].code.data());
	vnx::write(out, value.swap_binary, type_code, type_code->fields[49].code.data());
	vnx::write(out, value.offer_binary, type_code, type_code->fields[50].code.data());
	vnx::write(out, value.token_binary, type_code, type_code->fields[51].code.data());
	vnx::write(out, value.plot_nft_binary, type_code, type_code->fields[52].code.data());
	vnx::write(out, value.escrow_binary, type_code, type_code->fields[53].code.data());
	vnx::write(out, value.time_lock_binary, type_code, type_code->fields[54].code.data());
	vnx::write(out, value.relay_binary, type_code, type_code->fields[55].code.data());
	vnx::write(out, value.project_ratio, type_code, type_code->fields[57].code.data());
}

void read(std::istream& in, ::mmx::ChainParams& value) {
	value.read(in);
}

void write(std::ostream& out, const ::mmx::ChainParams& value) {
	value.write(out);
}

void accept(Visitor& visitor, const ::mmx::ChainParams& value) {
	value.accept(visitor);
}

} // vnx
